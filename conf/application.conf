# This is the main configuration file for the application.
# ~~~~~

include "silhouette.conf"


play {


  http {
    # Secret key
    # ~~~~~
    # The secret key is used to secure cryptographics functions.
    # If you deploy your application to several instances be sure to use the same key!
    secret.key = "LPd@UR:NuW/UsDvZOWm1^STvSMgM68r2;pRw<Tr@>LFj;ws9fur07d9zF`aTCp/r"

    # Registers the request handler
    # ~~~~~
    requestHandler = "play.api.http.DefaultHttpRequestHandler"
  }

  # The application languages
  # ~~~~~
  i18n.langs = ["en"]

  # The asset configuration
  # ~~~~~
  assets {
    path = "/public"
    urlPrefix = "/assets"
  }

  # The application DI modules
  # ~~~~~
    modules {
      enabled += common.AppModule

      enabled += "modules.BaseModule"
      enabled += "modules.JobModule"
      enabled += "modules.SilhouetteModule"
      enabled += "play.api.libs.mailer.MailerModule"

      disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
      disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

    }


  filters {
    enabled += play.filters.gzip.GzipFilter
//    enabled += utils.LoggingFilter
    enabled += play.filters.cors.CORSFilter
    disabled += play.filters.headers.SecurityHeadersFilter

    disabled += play.filters.csrf.CSRFFilter


    cors {
      # allow all paths
      pathPrefixes = ["/"]
      # allow all origins
      allowedOrigins = null
      allowedHttpMethods = null
      # allow all headers
      allowedHttpHeaders = null
    }


  }


  # Play mailer
  mailer {
    host = "localhost"
    port = 25
    mock = true
  }


}

//
//
//# Security Filter Configuration - Content Security Policy
//play.filters.headers {
//  contentSecurityPolicy = "default-src 'self';"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' data: *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com maps.googleapis.com maps.gstatic.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'unsafe-inline' 'self' cdnjs.cloudflare.com maps.googleapis.com code.jquery.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' ws://localhost:9000 http://localhost:4200  twitter.com *.xing.com;"
//}



# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}




database {
  dispatcher {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = 5
    }
  }
}


service {
  dispatcher {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = 5
    }
  }
}



mqtt.url = "tcp://localhost:1883"



// https://docs.janusgraph.org/latest/config-ref.html
janusgraph {
  storage {
    backend = "cassandra"
    hostname = "localhost"
  }
}

cassandra {
  storage {
    hosts = ["localhost"]
    keyspace = "my_app"
  }
}

